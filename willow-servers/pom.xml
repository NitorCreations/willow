<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.nitorcreations</groupId>
    <artifactId>willow-parent</artifactId>
    <version>1.1-SNAPSHOT</version>
    <relativePath>..</relativePath>
  </parent>
  <artifactId>willow-servers</artifactId>
  <name>Willow servers</name>
  <description>Willow operational servlets and servers</description>
  <dependencies>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.websocket</groupId>
      <artifactId>websocket-server</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-proxy</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-jmx</artifactId>
    </dependency>
    <dependency>
      <groupId>org.elasticsearch</groupId>
      <artifactId>elasticsearch</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
    </dependency>
    <dependency>
      <groupId>com.nitorcreations</groupId>
      <artifactId>willow-messages</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.nitorcreations</groupId>
      <artifactId>willow-utils</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.nitorcreations</groupId>
      <artifactId>willow-logging-jetty</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jul-to-slf4j</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.velocity</groupId>
      <artifactId>velocity</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch.agentproxy.core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch.agentproxy.connector-factory</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch.agentproxy.sshagent</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch.agentproxy.jsch</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.sisu</groupId>
      <artifactId>org.eclipse.sisu.inject</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-guice</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-web</artifactId>
    </dependency>
    <dependency>
      <groupId>mx.com.inftel.oss</groupId>
      <artifactId>shiro-oauth2</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <artifactId>junit</artifactId>
      <groupId>junit</groupId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-shade-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>uber</shadedClassifierName>
              <createDependencyReducedPom>false</createDependencyReducedPom>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>com.nitorcreations.willow.servers.MetricsServer</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>ro.isdc.wro4j</groupId>
        <artifactId>wro4j-maven-plugin</artifactId>
        <version>1.7.7</version>
        <executions>
          <execution>
            <id>run</id>
            <phase>compile</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <targetGroups>all</targetGroups>
            </configuration>
          </execution>
          <execution>
            <id>jshint</id>
            <phase>test</phase>
            <goals>
              <goal>jshint</goal>
            </goals>
            <configuration>
              <targetGroups>app</targetGroups>
              <options>devel,evil,noarg</options>
            </configuration>
          </execution>
            <execution>
                <id>csslint</id>
                <phase>test</phase>
                <goals>
                    <goal>csslint</goal>
                </goals>
                <configuration>
                    <targetGroups>app</targetGroups>
                </configuration>
            </execution>
        </executions>
        <configuration>
          <minimize>true</minimize>
          <destinationFolder>${project.build.directory}/target/classes/webapp</destinationFolder>
          <jsDestinationFolder>${project.build.directory}/classes/webapp/scripts</jsDestinationFolder>
          <cssDestinationFolder>${project.build.directory}/classes/webapp/styles</cssDestinationFolder>
          <contextFolder>${basedir}/src/main/resources/webapp</contextFolder>
          <wroFile>${basedir}/src/main/resources/wro.xml</wroFile>
          <ignoreMissingResources>false</ignoreMissingResources>
          <wroManagerFactory>ro.isdc.wro.maven.plugin.manager.factory.ConfigurableWroManagerFactory</wroManagerFactory>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <pathconvert pathsep=";" property="compress.jsfiles">
                  <fileset dir="${project.build.directory}/classes/webapp/styles" includes="**/*.css"/>
                  <fileset dir="${project.build.directory}/classes/webapp/scripts" includes="**/*.js"/>
                  <fileset dir="${project.build.directory}/classes/webapp/images" includes="**/*.svg"/>
                </pathconvert>
                <script language="javascript"><![CDATA[
                  try {
                    load("nashorn:mozilla_compat.js");
                  } catch (e) { }
                  importPackage(java.io);
                  //get the property and convert to an array
                  var files = project.getProperty("compress.jsfiles").split(";"),
                    gzip, i,len;
                  for (i=0, len=files.length; i < len; i++) {
                    //create new gzip task
                    gzip = project.createTask("gzip");
                    gzip.setSrc(new File(files[i]));
                    gzip.setDestfile(new File(files[i].replaceAll(".js$", ".js.gz").replaceAll(".css$", ".css.gz").replaceAll(".svg$", ".svg.gz")));
                    gzip.perform();
                  }
                  ]]>
                </script>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.searls</groupId>
        <artifactId>jasmine-maven-plugin</artifactId>
        <version>1.3.1.5</version>
        <executions>
          <execution>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <jsSrcDir>${project.basedir}/src/main/resources/webapp/scripts</jsSrcDir>
          <preloadSources>
            <source>jquery.js</source>
            <source>t3-testing.js</source>
            <source>sinon.js</source>
            <source>intercom.js</source>
          </preloadSources>
          <sourceIncludes>
            <include>behaviors/**/*.js</include>
            <include>services/**/*.js</include>
            <include>modules/**/*.js</include>
          </sourceIncludes>
          <specIncludes>
            <include>**/*.js</include>
          </specIncludes>
          <webDriverClassName>org.openqa.selenium.phantomjs.PhantomJSDriver</webDriverClassName>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
