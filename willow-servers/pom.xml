<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.nitorcreations</groupId>
    <artifactId>willow-parent</artifactId>
    <version>2.0.3-SNAPSHOT</version>
    <relativePath>..</relativePath>
  </parent>
  <artifactId>willow-servers</artifactId>
  <name>Willow servers</name>
  <description>Willow operational servlets and servers</description>
  <dependencies>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.websocket</groupId>
      <artifactId>websocket-server</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-proxy</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-jmx</artifactId>
    </dependency>
    <dependency>
      <groupId>org.elasticsearch</groupId>
      <artifactId>elasticsearch</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
    </dependency>
    <dependency>
      <groupId>com.nitorcreations</groupId>
      <artifactId>willow-messages</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.nitorcreations</groupId>
      <artifactId>willow-download</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.nitorcreations</groupId>
      <artifactId>willow-logging-jetty</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.nitorcreations</groupId>
      <artifactId>javaxdelta</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jul-to-slf4j</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.velocity</groupId>
      <artifactId>velocity</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch.agentproxy.core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch.agentproxy.connector-factory</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch.agentproxy.sshagent</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch.agentproxy.jsch</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.sisu</groupId>
      <artifactId>org.eclipse.sisu.inject</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-guice</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-web</artifactId>
    </dependency>
    <dependency>
      <groupId>mx.com.inftel.oss</groupId>
      <artifactId>shiro-oauth2</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <artifactId>junit</artifactId>
      <groupId>junit</groupId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>annotations</artifactId>
      <scope>provided</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-shade-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>uber</shadedClassifierName>
              <createDependencyReducedPom>false</createDependencyReducedPom>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>com.nitorcreations.willow.servers.MetricsServer</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>ro.isdc.wro4j</groupId>
        <artifactId>wro4j-maven-plugin</artifactId>
        <version>1.7.7</version>
        <executions>
          <execution>
            <id>run</id>
            <phase>compile</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <targetGroups>all</targetGroups>
            </configuration>
          </execution>
          <execution>
            <id>jshint</id>
            <phase>test</phase>
            <goals>
              <goal>jshint</goal>
            </goals>
            <configuration>
              <targetGroups>app</targetGroups>
              <options>devel,evil,noarg</options>
            </configuration>
          </execution>
          <execution>
            <id>csslint</id>
            <phase>test</phase>
            <goals>
              <goal>csslint</goal>
            </goals>
            <configuration>
              <targetGroups>app</targetGroups>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <minimize>true</minimize>
          <destinationFolder>${project.build.directory}/target/classes/webapp</destinationFolder>
          <jsDestinationFolder>${project.build.directory}/classes/webapp/scripts/lib</jsDestinationFolder>
          <cssDestinationFolder>${project.build.directory}/classes/webapp/styles/lib</cssDestinationFolder>
          <contextFolder>${basedir}/src/main/resources/webapp</contextFolder>
          <wroFile>${basedir}/src/main/resources/wro.xml</wroFile>
          <ignoreMissingResources>false</ignoreMissingResources>
          <wroManagerFactory>ro.isdc.wro.maven.plugin.manager.factory.ConfigurableWroManagerFactory</wroManagerFactory>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>compress-statics</id>
            <phase>compile</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <pathconvert pathsep=";" property="compress.jsfiles">
                  <fileset dir="${project.build.directory}/classes/webapp/styles" includes="**/*.css"/>
                  <fileset dir="${project.build.directory}/classes/webapp/scripts" includes="**/*.js"/>
                  <fileset dir="${project.build.directory}/classes/webapp/images" includes="**/*.svg"/>
                </pathconvert>
                <script language="javascript"><![CDATA[
                  try {
                    load("nashorn:mozilla_compat.js");
                  } catch (e) { }
                  importPackage(java.io);
                  //get the property and convert to an array
                  var files = project.getProperty("compress.jsfiles").split(";"),
                    gzip, i,len;
                  for (i=0, len=files.length; i < len; i++) {
                    //create new gzip task
                    gzip = project.createTask("gzip");
                    gzip.setSrc(new File(files[i]));
                    gzip.setDestfile(new File(files[i].replaceAll(".js$", ".js.gz").replaceAll(".css$", ".css.gz").replaceAll(".svg$", ".svg.gz")));
                    gzip.perform();
                  }
                  ]]>
                </script>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.searls</groupId>
        <artifactId>jasmine-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <phantomjs>
            <version>1.9.8</version>
            <checkSystemPath>true</checkSystemPath>
            <enforceVersion>true</enforceVersion>
            <source>REPOSITORY</source>
            <baseUrl></baseUrl>
            <outputDirectory>target/phantomjs</outputDirectory>
          </phantomjs>
          <jsSrcDir>${project.basedir}/src</jsSrcDir>
          <keepServerAlive>true</keepServerAlive>
          <preloadSources>
            <source>main/resources/webapp/scripts/lib/jquery.js</source>
            <source>lib/t3-testing.js</source>
            <source>lib/sinon.js</source>
            <source>main/resources/webapp/scripts/lib/intercom.js</source>
          </preloadSources>
          <sourceIncludes>
            <include>main/resources/webapp/scripts/behaviors/**/*.js</include>
            <include>main/resources/webapp/scripts/services/**/*.js</include>
            <include>main/resources/webapp/scripts/modules/**/*.js</include>
          </sourceIncludes>
          <specIncludes>
            <include>**/*.js</include>
          </specIncludes>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>integrationtests</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.timurstrekalov</groupId>
            <artifactId>saga-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>ut-coveraeg</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>coverage</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <baseDir>http://localhost:${jasmine.serverPort}</baseDir>
              <outputDir>${project.build.directory}/saga-coverage</outputDir>
              <noInstrumentPatterns>
                <pattern>.*/spec/.*</pattern>
                <pattern>.*/lib/.*</pattern>
                <pattern>.*/jasmine/.*</pattern>
                <pattern>.*/jquery.js</pattern>
                <pattern>.*/intercom.js</pattern>
              </noInstrumentPatterns>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>jacoco-download</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.jacoco</groupId>
                      <artifactId>org.jacoco.agent</artifactId>
                      <version>${jacoco.version}</version>
                      <classifier>runtime</classifier>
                      <type>jar</type>
                      <overWrite>false</overWrite>
                      <outputDirectory>target</outputDirectory>
                      <destFileName>jacoco-agent.jar</destFileName>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>server-port</id>
                <goals>
                  <goal>reserve-network-port</goal>
                </goals>
                <configuration>
                  <portNames>
                    <portName>enduser.port</portName>
                    <portName>deployer.port</portName>
                  </portNames>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>instrument</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>istanbul</executable>
                  <arguments>
                    <argument>instrument</argument>
                    <argument>src/main/resources/webapp/scripts/</argument>
                    <argument>--output</argument>
                    <argument>target/classes/webapp/instrumented-scripts</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>casperjs-test</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>src/test/resources/integration-tests.sh</executable>
                  <workingDirectory>${basedir}</workingDirectory>
                  <environmentVariables>
                    <SERVER_PORT>${enduser.port}</SERVER_PORT>
                    <DEPLOYER_PORT>${deployer.port}</DEPLOYER_PORT>
                  </environmentVariables>
                </configuration>
              </execution>
              <execution>
                <id>istanbul-report</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>istanbul</executable>
                  <workingDirectory>${basedir}</workingDirectory>
                  <arguments>
                    <argument>report</argument>
                    <argument>--include</argument>
                    <argument>target/js-coverage/test*.json</argument>
                    <argument>--dir</argument>
                    <argument>target/site/cobertura</argument>
                    <argument>-v</argument>
                    <argument>html</argument>
                    <argument>cobertura</argument>
                    <argument>lcovonly</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>merge-its</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>merge</goal>
                </goals>
                <configuration>
                  <fileSets>
                    <fileSet>
                      <directory>${project.build.directory}/willow-deployer</directory>
                      <includes>
                        <include>*.exec</include>
                      </includes>
                    </fileSet>
                  </fileSets>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>extract-classes</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target>
                    <copy file="${project.build.directory}/jacoco.exec"
                      tofile="${project.build.directory}/willow-deployer/unit-tests.exec"/>
                    <unzip dest="target/classes">
                      <fileset dir="..">
                        <include name="**/willow-*${project.version}.jar"/>
                      </fileset>
                    </unzip>
                  </target>
                </configuration>
              </execution>
              <execution>
                <id>fix-test-reports</id>
                <phase>verify</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target>
                    <copy file="${project.build.directory}/saga-coverage/total-coverage.dat"
                      tofile="${project.build.directory}/jasmine/jsTestDriver.conf-coverage.dat"/>
                    <xslt style="src/test/resources/fix-jasmine-report.xsl"
                      in="${project.build.directory}/jasmine/TEST-jasmine.xml"
                      out="${project.build.directory}/saga-coverage/TEST-jasmine.xml" />
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
